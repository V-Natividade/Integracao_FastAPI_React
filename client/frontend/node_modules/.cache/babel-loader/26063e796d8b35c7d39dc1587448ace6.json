{"ast":null,"code":"export const errorFieldToMessageMapping = {\n  email: \"Please enter a valid email.\",\n  username: \"Por favor, digite um nome que contenha apenas letras, números, sublinhados e travessões.\",\n  password: \"Please choose a password with at least 7 characters.\"\n};\nexport const parseErrorDetail = errorDetail => {\n  let errorMessage = \"Something went wrong. Contact support.\";\n\n  if (Array.isArray(errorDetail === null || errorDetail === void 0 ? void 0 : errorDetail.loc)) {\n    // erro de path inválido\n    if (errorDetail.loc[0] === \"path\") return errorMessage; // erro com parâmetro de consulta\n\n    if (errorDetail.loc[0] === \"query\") return errorMessage; // pelo fato de usar Body(..., embed)` nas requisições pro servidor\n    // o corpo deve ser uma lista com os três parâmetros: [\"body\", \"new_user\", \"email\"]\n\n    if (errorDetail.loc[0] === \"body\") {\n      const invalidField = errorDetail.loc[2];\n\n      if (errorFieldToMessageMapping[invalidField]) {\n        errorMessage = errorFieldToMessageMapping[invalidField];\n      } else if (errorDetail === null || errorDetail === void 0 ? void 0 : errorDetail.msg) {\n        errorMessage = errorDetail.msg;\n      }\n    }\n  }\n\n  return errorMessage;\n};\nexport const extractErrorMessages = error => {\n  const errorList = []; // se o erro é uma string, passa a mensagem\n\n  if (typeof error === \"string\") errorList.push(error); // se o erro já vem como string do servidor, passa apenas a mensagem\n\n  if (typeof (error === null || error === void 0 ? void 0 : error.detail) === \"string\") errorList.push(error.detail); // caso haja um erro de validação no corpo da solicitação\n  // os problemas apareceram aqui\n\n  if (Array.isArray(error === null || error === void 0 ? void 0 : error.detail)) {\n    error.detail.forEach(errorDetail => {\n      const errorMessage = parseErrorDetail(errorDetail);\n      errorList.push(errorMessage);\n    });\n  }\n\n  return errorList;\n};","map":{"version":3,"sources":["/home/vln/Área de Trabalho/projetos/s2isub/certi_s2i.sub-pocs/consumo_api/frontend/frontend/src/utils/errors.js"],"names":["errorFieldToMessageMapping","email","username","password","parseErrorDetail","errorDetail","errorMessage","Array","isArray","loc","invalidField","msg","extractErrorMessages","error","errorList","push","detail","forEach"],"mappings":"AAAA,OAAO,MAAMA,0BAA0B,GAAG;AACxCC,EAAAA,KAAK,EAAE,6BADiC;AAExCC,EAAAA,QAAQ,EACN,0FAHsC;AAIxCC,EAAAA,QAAQ,EAAE;AAJ8B,CAAnC;AAOP,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,IAAiB;AAC/C,MAAIC,YAAY,GAAG,wCAAnB;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,WAAd,aAAcA,WAAd,uBAAcA,WAAW,CAAEI,GAA3B,CAAJ,EAAqC;AACnC;AACA,QAAIJ,WAAW,CAACI,GAAZ,CAAgB,CAAhB,MAAuB,MAA3B,EAAmC,OAAOH,YAAP,CAFA,CAGnC;;AACA,QAAID,WAAW,CAACI,GAAZ,CAAgB,CAAhB,MAAuB,OAA3B,EAAoC,OAAOH,YAAP,CAJD,CAKnC;AACA;;AACA,QAAID,WAAW,CAACI,GAAZ,CAAgB,CAAhB,MAAuB,MAA3B,EAAmC;AACjC,YAAMC,YAAY,GAAGL,WAAW,CAACI,GAAZ,CAAgB,CAAhB,CAArB;;AAEA,UAAIT,0BAA0B,CAACU,YAAD,CAA9B,EAA8C;AAC5CJ,QAAAA,YAAY,GAAGN,0BAA0B,CAACU,YAAD,CAAzC;AACD,OAFD,MAEO,IAAIL,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEM,GAAjB,EAAsB;AAC3BL,QAAAA,YAAY,GAAGD,WAAW,CAACM,GAA3B;AACD;AACF;AACF;;AAED,SAAOL,YAAP;AACD,CAtBM;AAwBP,OAAO,MAAMM,oBAAoB,GAAIC,KAAD,IAAW;AAC7C,QAAMC,SAAS,GAAG,EAAlB,CAD6C,CAG7C;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+BC,SAAS,CAACC,IAAV,CAAeF,KAAf,EAJc,CAM7C;;AACA,MAAI,QAAOA,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEG,MAAd,MAAyB,QAA7B,EAAuCF,SAAS,CAACC,IAAV,CAAeF,KAAK,CAACG,MAArB,EAPM,CAS7C;AACA;;AACA,MAAIT,KAAK,CAACC,OAAN,CAAcK,KAAd,aAAcA,KAAd,uBAAcA,KAAK,CAAEG,MAArB,CAAJ,EAAkC;AAChCH,IAAAA,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAsBZ,WAAD,IAAiB;AACpC,YAAMC,YAAY,GAAGF,gBAAgB,CAACC,WAAD,CAArC;AACAS,MAAAA,SAAS,CAACC,IAAV,CAAeT,YAAf;AACD,KAHD;AAID;;AAED,SAAOQ,SAAP;AACD,CAnBM","sourcesContent":["export const errorFieldToMessageMapping = {\n  email: \"Please enter a valid email.\",\n  username:\n    \"Por favor, digite um nome que contenha apenas letras, números, sublinhados e travessões.\",\n  password: \"Please choose a password with at least 7 characters.\",\n};\n\nexport const parseErrorDetail = (errorDetail) => {\n  let errorMessage = \"Something went wrong. Contact support.\";\n\n  if (Array.isArray(errorDetail?.loc)) {\n    // erro de path inválido\n    if (errorDetail.loc[0] === \"path\") return errorMessage;\n    // erro com parâmetro de consulta\n    if (errorDetail.loc[0] === \"query\") return errorMessage;\n    // pelo fato de usar Body(..., embed)` nas requisições pro servidor\n    // o corpo deve ser uma lista com os três parâmetros: [\"body\", \"new_user\", \"email\"]\n    if (errorDetail.loc[0] === \"body\") {\n      const invalidField = errorDetail.loc[2];\n\n      if (errorFieldToMessageMapping[invalidField]) {\n        errorMessage = errorFieldToMessageMapping[invalidField];\n      } else if (errorDetail?.msg) {\n        errorMessage = errorDetail.msg;\n      }\n    }\n  }\n\n  return errorMessage;\n};\n\nexport const extractErrorMessages = (error) => {\n  const errorList = [];\n\n  // se o erro é uma string, passa a mensagem\n  if (typeof error === \"string\") errorList.push(error);\n\n  // se o erro já vem como string do servidor, passa apenas a mensagem\n  if (typeof error?.detail === \"string\") errorList.push(error.detail);\n\n  // caso haja um erro de validação no corpo da solicitação\n  // os problemas apareceram aqui\n  if (Array.isArray(error?.detail)) {\n    error.detail.forEach((errorDetail) => {\n      const errorMessage = parseErrorDetail(errorDetail);\n      errorList.push(errorMessage);\n    });\n  }\n\n  return errorList;\n};\n"]},"metadata":{},"sourceType":"module"}