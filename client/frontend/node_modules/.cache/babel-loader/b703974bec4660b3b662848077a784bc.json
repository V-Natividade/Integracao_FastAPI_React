{"ast":null,"code":"/**\n * VValidação simples de email\n *\n * @param {String} text - email a ser validado\n * @return {Boolean}\n */\nexport function validateEmail(text) {\n  return (text === null || text === void 0 ? void 0 : text.indexOf(\"@\")) !== -1;\n}\n/**\n * Garante que a senha tenha o comprimento mínimo\n *\n * @param {String} password - senha pra validar\n * @param {Integer} length - a senha deve ser tão longa quanto\n * @return {Boolean}\n */\n\nexport function validatePassword(password, length = 7) {\n  return (password === null || password === void 0 ? void 0 : password.length) >= length;\n}\n/**\n * Garante que o nome de usuário contenha apenas letras, números, sublinhados e travessões\n *\n * @param {String} username - username to be validated\n * @return {Boolean}\n */\n\nexport function validateUsername(username) {\n  return /^[a-zA-Z0-9_-]+$/.test(username);\n}\n/**\n * Ensures a price field matches the general format: 9.99 or 2199999.99\n *\n * @param {String} price - price to be validated\n * @return {Boolean}\n */\n\nexport function validatePrice(price) {\n  return /^\\d+\\.\\d{1,2}$/.test(String(price).trim());\n}\nexport default {\n  email: validateEmail,\n  password: validatePassword,\n  username: validateUsername,\n  price: validatePrice\n};","map":{"version":3,"sources":["/home/vln/Área de Trabalho/projetos/s2isub/certi_s2i.sub-pocs/consumo_api/frontend/frontend/src/utils/validation.js"],"names":["validateEmail","text","indexOf","validatePassword","password","length","validateUsername","username","test","validatePrice","price","String","trim","email"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,SAAO,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,OAAN,CAAc,GAAd,OAAuB,CAAC,CAA/B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,MAAM,GAAG,CAA7C,EAAgD;AACrD,SAAO,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEC,MAAV,KAAoBA,MAA3B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,SAAO,mBAAmBC,IAAnB,CAAwBD,QAAxB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,SAAO,iBAAiBF,IAAjB,CAAsBG,MAAM,CAACD,KAAD,CAAN,CAAcE,IAAd,EAAtB,CAAP;AACD;AAED,eAAe;AACbC,EAAAA,KAAK,EAAEb,aADM;AAEbI,EAAAA,QAAQ,EAAED,gBAFG;AAGbI,EAAAA,QAAQ,EAAED,gBAHG;AAIbI,EAAAA,KAAK,EAAED;AAJM,CAAf","sourcesContent":["/**\n * VValidação simples de email\n *\n * @param {String} text - email a ser validado\n * @return {Boolean}\n */\nexport function validateEmail(text) {\n  return text?.indexOf(\"@\") !== -1;\n}\n\n/**\n * Garante que a senha tenha o comprimento mínimo\n *\n * @param {String} password - senha pra validar\n * @param {Integer} length - a senha deve ser tão longa quanto\n * @return {Boolean}\n */\nexport function validatePassword(password, length = 7) {\n  return password?.length >= length;\n}\n\n/**\n * Garante que o nome de usuário contenha apenas letras, números, sublinhados e travessões\n *\n * @param {String} username - username to be validated\n * @return {Boolean}\n */\nexport function validateUsername(username) {\n  return /^[a-zA-Z0-9_-]+$/.test(username);\n}\n\n/**\n * Ensures a price field matches the general format: 9.99 or 2199999.99\n *\n * @param {String} price - price to be validated\n * @return {Boolean}\n */\nexport function validatePrice(price) {\n  return /^\\d+\\.\\d{1,2}$/.test(String(price).trim());\n}\n\nexport default {\n  email: validateEmail,\n  password: validatePassword,\n  username: validateUsername,\n  price: validatePrice,\n};\n"]},"metadata":{},"sourceType":"module"}