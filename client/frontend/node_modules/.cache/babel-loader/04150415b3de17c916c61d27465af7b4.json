{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SortableProperties = void 0;\n\nvar _comparators = require(\"./comparators\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @typedef {Object} SortableProperty\n * @property {string} sortableProperty.name - Name of the property.\n * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort\n * by.\n * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve\n * past sort orders.\n */\n\n/**\n * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as\n * well as the last sort order for each property.\n */\n\n\nvar SortableProperties = /*#__PURE__*/function () {\n  /**\n   * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.\n   * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.\n   */\n  function SortableProperties(sortableProperties, initialSortablePropertyName) {\n    _classCallCheck(this, SortableProperties);\n\n    _defineProperty(this, \"sortableProperties\", void 0);\n\n    _defineProperty(this, \"currentSortedProperty\", void 0);\n\n    this.sortableProperties = sortableProperties;\n    /**\n     * The current property that is being sorted on.\n     * @type {SortableProperty}\n     */\n\n    var currentSortedProperty = this.getSortablePropertyByName(initialSortablePropertyName);\n\n    if (!currentSortedProperty) {\n      throw new Error(\"No property with the name \".concat(initialSortablePropertyName));\n    }\n\n    this.currentSortedProperty = currentSortedProperty;\n  }\n  /**\n   * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.\n   */\n\n\n  _createClass(SortableProperties, [{\n    key: \"getSortedProperty\",\n    value: function getSortedProperty() {\n      return this.currentSortedProperty;\n    }\n    /**\n     * Sorts the items passed in and returns a newly sorted array.\n     * @param items {Array.<Object>}\n     * @returns {Array.<Object>} sorted array of items, based off the sort properties.\n     */\n\n  }, {\n    key: \"sortItems\",\n    value: function sortItems(items) {\n      var copy = _toConsumableArray(items);\n\n      var comparator = _comparators.Comparators.value(this.getSortedProperty().getValue);\n\n      if (!this.isCurrentSortAscending()) {\n        comparator = _comparators.Comparators.reverse(comparator);\n      }\n\n      copy.sort(comparator);\n      return copy;\n    }\n    /**\n     * Returns the SortProperty with the given name, if found.\n     * @param {String} propertyName\n     * @returns {SortableProperty|undefined}\n     */\n\n  }, {\n    key: \"getSortablePropertyByName\",\n    value: function getSortablePropertyByName(propertyName) {\n      return this.sortableProperties.find(function (property) {\n        return property.name === propertyName;\n      });\n    }\n    /**\n     * Updates the sort property, potentially flipping the sort order based on whether the same\n     * property was already being sorted.\n     * @param propertyName {String}\n     */\n\n  }, {\n    key: \"sortOn\",\n    value: function sortOn(propertyName) {\n      var newSortedProperty = this.getSortablePropertyByName(propertyName);\n\n      if (!newSortedProperty) {\n        throw new Error(\"No property with the name \".concat(propertyName));\n      }\n\n      var sortedProperty = this.getSortedProperty();\n\n      if (sortedProperty.name === newSortedProperty.name) {\n        this.flipCurrentSortOrder();\n      } else {\n        this.currentSortedProperty = newSortedProperty;\n      }\n    }\n    /**\n     * @returns {boolean} True if the current sortable property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isCurrentSortAscending\",\n    value: function isCurrentSortAscending() {\n      var sortedProperty = this.getSortedProperty();\n      return sortedProperty ? this.isAscendingByName(sortedProperty.name) : false;\n    }\n    /**\n     * @param {string} propertyName\n     * @returns {boolean} True if the given sort property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isAscendingByName\",\n    value: function isAscendingByName(propertyName) {\n      var sortedProperty = this.getSortablePropertyByName(propertyName);\n      return sortedProperty ? sortedProperty.isAscending : false;\n    }\n    /**\n     * Flips the current sorted property sort order.\n     */\n\n  }, {\n    key: \"flipCurrentSortOrder\",\n    value: function flipCurrentSortOrder() {\n      this.currentSortedProperty.isAscending = !this.currentSortedProperty.isAscending;\n    }\n  }]);\n\n  return SortableProperties;\n}();\n\nexports.SortableProperties = SortableProperties;","map":{"version":3,"sources":["/home/vln/√Årea de Trabalho/projetos/s2isub/certi_s2i.sub-pocs/consumo_api/frontend/frontend/node_modules/@elastic/eui/lib/services/sort/sortable_properties.js"],"names":["Object","defineProperty","exports","value","SortableProperties","_comparators","require","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","_defineProperty","obj","sortableProperties","initialSortablePropertyName","currentSortedProperty","getSortablePropertyByName","Error","concat","getSortedProperty","sortItems","items","copy","comparator","Comparators","getValue","isCurrentSortAscending","reverse","sort","propertyName","find","property","sortOn","newSortedProperty","sortedProperty","flipCurrentSortOrder","isAscendingByName","isAscending"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SortableProperties = void 0;\n\nvar _comparators = require(\"./comparators\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @typedef {Object} SortableProperty\n * @property {string} sortableProperty.name - Name of the property.\n * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort\n * by.\n * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve\n * past sort orders.\n */\n\n/**\n * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as\n * well as the last sort order for each property.\n */\nvar SortableProperties = /*#__PURE__*/function () {\n  /**\n   * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.\n   * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.\n   */\n  function SortableProperties(sortableProperties, initialSortablePropertyName) {\n    _classCallCheck(this, SortableProperties);\n\n    _defineProperty(this, \"sortableProperties\", void 0);\n\n    _defineProperty(this, \"currentSortedProperty\", void 0);\n\n    this.sortableProperties = sortableProperties;\n    /**\n     * The current property that is being sorted on.\n     * @type {SortableProperty}\n     */\n\n    var currentSortedProperty = this.getSortablePropertyByName(initialSortablePropertyName);\n\n    if (!currentSortedProperty) {\n      throw new Error(\"No property with the name \".concat(initialSortablePropertyName));\n    }\n\n    this.currentSortedProperty = currentSortedProperty;\n  }\n  /**\n   * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.\n   */\n\n\n  _createClass(SortableProperties, [{\n    key: \"getSortedProperty\",\n    value: function getSortedProperty() {\n      return this.currentSortedProperty;\n    }\n    /**\n     * Sorts the items passed in and returns a newly sorted array.\n     * @param items {Array.<Object>}\n     * @returns {Array.<Object>} sorted array of items, based off the sort properties.\n     */\n\n  }, {\n    key: \"sortItems\",\n    value: function sortItems(items) {\n      var copy = _toConsumableArray(items);\n\n      var comparator = _comparators.Comparators.value(this.getSortedProperty().getValue);\n\n      if (!this.isCurrentSortAscending()) {\n        comparator = _comparators.Comparators.reverse(comparator);\n      }\n\n      copy.sort(comparator);\n      return copy;\n    }\n    /**\n     * Returns the SortProperty with the given name, if found.\n     * @param {String} propertyName\n     * @returns {SortableProperty|undefined}\n     */\n\n  }, {\n    key: \"getSortablePropertyByName\",\n    value: function getSortablePropertyByName(propertyName) {\n      return this.sortableProperties.find(function (property) {\n        return property.name === propertyName;\n      });\n    }\n    /**\n     * Updates the sort property, potentially flipping the sort order based on whether the same\n     * property was already being sorted.\n     * @param propertyName {String}\n     */\n\n  }, {\n    key: \"sortOn\",\n    value: function sortOn(propertyName) {\n      var newSortedProperty = this.getSortablePropertyByName(propertyName);\n\n      if (!newSortedProperty) {\n        throw new Error(\"No property with the name \".concat(propertyName));\n      }\n\n      var sortedProperty = this.getSortedProperty();\n\n      if (sortedProperty.name === newSortedProperty.name) {\n        this.flipCurrentSortOrder();\n      } else {\n        this.currentSortedProperty = newSortedProperty;\n      }\n    }\n    /**\n     * @returns {boolean} True if the current sortable property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isCurrentSortAscending\",\n    value: function isCurrentSortAscending() {\n      var sortedProperty = this.getSortedProperty();\n      return sortedProperty ? this.isAscendingByName(sortedProperty.name) : false;\n    }\n    /**\n     * @param {string} propertyName\n     * @returns {boolean} True if the given sort property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isAscendingByName\",\n    value: function isAscendingByName(propertyName) {\n      var sortedProperty = this.getSortablePropertyByName(propertyName);\n      return sortedProperty ? sortedProperty.isAscending : false;\n    }\n    /**\n     * Flips the current sorted property sort order.\n     */\n\n  }, {\n    key: \"flipCurrentSortOrder\",\n    value: function flipCurrentSortOrder() {\n      this.currentSortedProperty.isAscending = !this.currentSortedProperty.isAscending;\n    }\n  }]);\n\n  return SortableProperties;\n}();\n\nexports.SortableProperties = SortableProperties;"]},"metadata":{},"sourceType":"script"}