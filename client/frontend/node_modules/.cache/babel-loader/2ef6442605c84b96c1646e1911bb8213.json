{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBreakpoint = getBreakpoint;\nexports.isWithinMaxBreakpoint = isWithinMaxBreakpoint;\nexports.isWithinBreakpoints = isWithinBreakpoints;\nexports.BREAKPOINT_KEYS = exports.BREAKPOINTS = void 0;\n\nvar _common = require(\"../components/common\");\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nvar BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexports.BREAKPOINTS = BREAKPOINTS;\nvar BREAKPOINT_KEYS = (0, _common.keysOf)(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexports.BREAKPOINT_KEYS = BREAKPOINT_KEYS;\n\nfunction getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS; // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n\n  return (0, _common.keysOf)(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}\n/**\n * Given the current `width` and a max breakpoint key,\n * this function returns true or false if the `width` falls within the max\n * breakpoint or any breakpoints below\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize | number} max The named breakpoint or custom number to check against\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\n\n\nfunction isWithinMaxBreakpoint(width, max) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n\n  if (typeof max === 'number') {\n    return width <= max;\n  } else {\n    var currentBreakpoint = getBreakpoint(width, breakpoints);\n    return currentBreakpoint ? breakpoints[currentBreakpoint] <= breakpoints[max] : false;\n  }\n}\n/**\n * Given the current `width` and an array of breakpoint keys,\n * this function returns true or false if the `width` falls within\n * any of the named breakpoints\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize[]} sizes An array of named breakpoints\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\n\n\nfunction isWithinBreakpoints(width, sizes) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n  var currentBreakpoint = getBreakpoint(width, breakpoints);\n  return currentBreakpoint ? sizes.includes(currentBreakpoint) : false;\n}","map":{"version":3,"sources":["/frontend/node_modules/@elastic/eui/lib/services/breakpoint.js"],"names":["Object","defineProperty","exports","value","getBreakpoint","isWithinMaxBreakpoint","isWithinBreakpoints","BREAKPOINT_KEYS","BREAKPOINTS","_common","require","xl","l","m","s","xs","keysOf","width","breakpoints","arguments","length","undefined","find","key","max","currentBreakpoint","sizes","includes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;AACAH,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B;AACAJ,OAAO,CAACK,eAAR,GAA0BL,OAAO,CAACM,WAAR,GAAsB,KAAK,CAArD;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,WAAW,GAAG;AAChBG,EAAAA,EAAE,EAAE,IADY;AAEhBC,EAAAA,CAAC,EAAE,GAFa;AAGhBC,EAAAA,CAAC,EAAE,GAHa;AAIhBC,EAAAA,CAAC,EAAE,GAJa;AAKhBC,EAAAA,EAAE,EAAE;AALY,CAAlB;AAOAb,OAAO,CAACM,WAAR,GAAsBA,WAAtB;AACA,IAAID,eAAe,GAAG,CAAC,GAAGE,OAAO,CAACO,MAAZ,EAAoBR,WAApB,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAN,OAAO,CAACK,eAAR,GAA0BA,eAA1B;;AAEA,SAASH,aAAT,CAAuBa,KAAvB,EAA8B;AAC5B,MAAIC,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEX,WAAtF,CAD4B,CAE5B;;AACA,SAAO,CAAC,GAAGC,OAAO,CAACO,MAAZ,EAAoBR,WAApB,EAAiCc,IAAjC,CAAsC,UAAUC,GAAV,EAAe;AAC1D,WAAOL,WAAW,CAACK,GAAD,CAAX,IAAoBN,KAA3B;AACD,GAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASZ,qBAAT,CAA+BY,KAA/B,EAAsCO,GAAtC,EAA2C;AACzC,MAAIN,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEX,WAAtF;;AAEA,MAAI,OAAOgB,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOP,KAAK,IAAIO,GAAhB;AACD,GAFD,MAEO;AACL,QAAIC,iBAAiB,GAAGrB,aAAa,CAACa,KAAD,EAAQC,WAAR,CAArC;AACA,WAAOO,iBAAiB,GAAGP,WAAW,CAACO,iBAAD,CAAX,IAAkCP,WAAW,CAACM,GAAD,CAAhD,GAAwD,KAAhF;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASlB,mBAAT,CAA6BW,KAA7B,EAAoCS,KAApC,EAA2C;AACzC,MAAIR,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEX,WAAtF;AACA,MAAIiB,iBAAiB,GAAGrB,aAAa,CAACa,KAAD,EAAQC,WAAR,CAArC;AACA,SAAOO,iBAAiB,GAAGC,KAAK,CAACC,QAAN,CAAeF,iBAAf,CAAH,GAAuC,KAA/D;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBreakpoint = getBreakpoint;\nexports.isWithinMaxBreakpoint = isWithinMaxBreakpoint;\nexports.isWithinBreakpoints = isWithinBreakpoints;\nexports.BREAKPOINT_KEYS = exports.BREAKPOINTS = void 0;\n\nvar _common = require(\"../components/common\");\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexports.BREAKPOINTS = BREAKPOINTS;\nvar BREAKPOINT_KEYS = (0, _common.keysOf)(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexports.BREAKPOINT_KEYS = BREAKPOINT_KEYS;\n\nfunction getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS;\n  // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n  return (0, _common.keysOf)(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}\n/**\n * Given the current `width` and a max breakpoint key,\n * this function returns true or false if the `width` falls within the max\n * breakpoint or any breakpoints below\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize | number} max The named breakpoint or custom number to check against\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\n\n\nfunction isWithinMaxBreakpoint(width, max) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n\n  if (typeof max === 'number') {\n    return width <= max;\n  } else {\n    var currentBreakpoint = getBreakpoint(width, breakpoints);\n    return currentBreakpoint ? breakpoints[currentBreakpoint] <= breakpoints[max] : false;\n  }\n}\n/**\n * Given the current `width` and an array of breakpoint keys,\n * this function returns true or false if the `width` falls within\n * any of the named breakpoints\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize[]} sizes An array of named breakpoints\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\n\n\nfunction isWithinBreakpoints(width, sizes) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n  var currentBreakpoint = getBreakpoint(width, breakpoints);\n  return currentBreakpoint ? sizes.includes(currentBreakpoint) : false;\n}"]},"metadata":{},"sourceType":"script"}