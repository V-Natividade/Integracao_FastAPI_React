{"ast":null,"code":"import axios from \"axios\";\nimport { formatURL } from \"../utils/urls\";\n\nconst getClient = (token = null) => {\n  const defaultOptions = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n  return {\n    get: (url, options = {}) => axios.get(url, { ...defaultOptions,\n      ...options\n    }),\n    post: (url, data, options = {}) => axios.post(url, data, { ...defaultOptions,\n      ...options\n    }),\n    put: (url, data, options = {}) => axios.put(url, data, { ...defaultOptions,\n      ...options\n    }),\n    delete: (url, data, options = {}) => axios.delete(url, { ...defaultOptions,\n      ...options\n    })\n  };\n};\n/**\n *\n * @param {String} url - relativo ao endpoint da API\n * @param {String} method - \"GET\", \"POST\", \"PUT\", \"DELETE\"\n * @param {Object} types - Objeto que representa os diferentes tipos de ação: REQUEST, SUCCESS, FAILURE\n * @param {Object} options - Objeto com dados opicionais e parâmetros de consulta\n * @param {Function} onSuccess - callback, se houver algum retorno\n */\n\n\nconst apiClient = ({\n  url,\n  method,\n  types: {\n    REQUEST,\n    SUCCESS,\n    FAILURE\n  },\n  options: {\n    data,\n    params\n  },\n  onSuccess = res => ({\n    success: true,\n    status: res.status,\n    data: res.data\n  }),\n  onFailure = res => ({\n    success: false,\n    status: res.status,\n    error: res.error\n  })\n}) => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"access_token\");\n    const client = getClient(token);\n    dispatch({\n      type: REQUEST\n    });\n    const urlPath = formatURL(url, params);\n\n    try {\n      const res = await client[method.toLowerCase()](urlPath, data);\n      dispatch({\n        type: SUCCESS,\n        data: res.data\n      });\n      return onSuccess({\n        type: SUCCESS,\n        ...res\n      });\n    } catch (error) {\n      var _error$response;\n\n      console.log(error);\n      dispatch({\n        type: FAILURE,\n        error: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) ? error.response.data : error\n      });\n      return onFailure({\n        type: FAILURE,\n        status: error.status,\n        error: error.response\n      });\n    }\n  };\n};\n\nexport default apiClient;","map":{"version":3,"sources":["/home/vln/Área de Trabalho/projetos/s2isub/certi_s2i.sub-pocs/consumo_api/frontend/frontend/src/services/apiClient.js"],"names":["axios","formatURL","getClient","token","defaultOptions","headers","Authorization","get","url","options","post","data","put","delete","apiClient","method","types","REQUEST","SUCCESS","FAILURE","params","onSuccess","res","success","status","onFailure","error","dispatch","localStorage","getItem","client","type","urlPath","toLowerCase","console","log","response"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { formatURL } from \"../utils/urls\";\n\nconst getClient = (token = null) => {\n  const defaultOptions = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n\n  return {\n    get: (url, options = {}) =>\n      axios.get(url, { ...defaultOptions, ...options }),\n    post: (url, data, options = {}) =>\n      axios.post(url, data, { ...defaultOptions, ...options }),\n    put: (url, data, options = {}) =>\n      axios.put(url, data, { ...defaultOptions, ...options }),\n    delete: (url, data, options = {}) =>\n      axios.delete(url, { ...defaultOptions, ...options }),\n  };\n};\n\n/**\n *\n * @param {String} url - relativo ao endpoint da API\n * @param {String} method - \"GET\", \"POST\", \"PUT\", \"DELETE\"\n * @param {Object} types - Objeto que representa os diferentes tipos de ação: REQUEST, SUCCESS, FAILURE\n * @param {Object} options - Objeto com dados opicionais e parâmetros de consulta\n * @param {Function} onSuccess - callback, se houver algum retorno\n */\nconst apiClient = ({\n  url,\n  method,\n  types: { REQUEST, SUCCESS, FAILURE },\n  options: { data, params },\n  onSuccess = (res) => ({ success: true, status: res.status, data: res.data }),\n  onFailure = (res) => ({\n    success: false,\n    status: res.status,\n    error: res.error,\n  }),\n}) => {\n  return async (dispatch) => {\n    const token = localStorage.getItem(\"access_token\");\n    const client = getClient(token);\n\n    dispatch({ type: REQUEST });\n    const urlPath = formatURL(url, params);\n\n    try {\n      const res = await client[method.toLowerCase()](urlPath, data);\n\n      dispatch({ type: SUCCESS, data: res.data });\n\n      return onSuccess({ type: SUCCESS, ...res });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: FAILURE,\n        error: error?.response?.data ? error.response.data : error,\n      });\n\n      return onFailure({\n        type: FAILURE,\n        status: error.status,\n        error: error.response,\n      });\n    }\n  };\n};\n\nexport default apiClient;\n"]},"metadata":{},"sourceType":"module"}