{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCombinedRefs = void 0;\n\nvar _react = require(\"react\");\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * For use when a component needs to set `ref` objects from multiple sources.\n * For instance, if a component accepts a `ref` prop but also needs its own\n * local reference for calculations, etc.\n * This hook handles setting multiple `ref`s of any available `ref` type\n * in a single callback function.\n */\n\n\nvar useCombinedRefs = function useCombinedRefs(refs) {\n  return (0, _react.useCallback)(function (node) {\n    return refs.forEach(function (ref) {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    });\n  }, [refs]);\n};\n\nexports.useCombinedRefs = useCombinedRefs;","map":{"version":3,"sources":["/frontend/node_modules/@elastic/eui/lib/services/hooks/useCombinedRefs.js"],"names":["Object","defineProperty","exports","value","useCombinedRefs","_react","require","refs","useCallback","node","forEach","ref","current"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,eAAe,GAAG,SAASA,eAAT,CAAyBG,IAAzB,EAA+B;AACnD,SAAO,CAAC,GAAGF,MAAM,CAACG,WAAX,EAAwB,UAAUC,IAAV,EAAgB;AAC7C,WAAOF,IAAI,CAACG,OAAL,CAAa,UAAUC,GAAV,EAAe;AACjC,UAAI,CAACA,GAAL,EAAU;;AAEV,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACF,IAAD,CAAH;AACD,OAFD,MAEO;AACLE,QAAAA,GAAG,CAACC,OAAJ,GAAcH,IAAd;AACD;AACF,KARM,CAAP;AASD,GAVM,EAUJ,CAACF,IAAD,CAVI,CAAP;AAWD,CAZD;;AAcAL,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCombinedRefs = void 0;\n\nvar _react = require(\"react\");\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * For use when a component needs to set `ref` objects from multiple sources.\n * For instance, if a component accepts a `ref` prop but also needs its own\n * local reference for calculations, etc.\n * This hook handles setting multiple `ref`s of any available `ref` type\n * in a single callback function.\n */\nvar useCombinedRefs = function useCombinedRefs(refs) {\n  return (0, _react.useCallback)(function (node) {\n    return refs.forEach(function (ref) {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    });\n  }, [refs]);\n};\n\nexports.useCombinedRefs = useCombinedRefs;"]},"metadata":{},"sourceType":"script"}